---
alwaysApply: true
---
# Соглашения по разработке кода

> Полное техническое видение проекта описано в @vision.md

## Утилиты
- Для управления зависимостями используем **uv** и `pyproject.toml` (никаких requirements.txt)
- Для автоматизации команд (запуск, тесты, деплой) используем **make**

## Основные принципы

### KISS (Keep It Simple, Stupid)
- Максимальная простота во всем
- Читаемость кода важнее "умных" решений
- Никаких сложных паттернов и абстракций

### Функциональное программирование
- **Только функции, без ООП**
- Минимум классов и наследования
- Простые функции с четкой ответственностью
- Избегаем сложных паттернов проектирования

### Архитектурные принципы
- **Плоская структура** - минимум вложенности
- **Разделение ответственности** по модулям
- **Минимум зависимостей** между модулями
- **DRY** только когда действительно нужно
- **YAGNI** - не реализуем то, что не нужно сейчас

## Стандарты кода

### Структура
- Все функции в src/ модулях согласно @vision.md секция 3
- main.py в корне как единственная точка входа
- Конфигурация в config.py через переменные окружения

### Функции
- Одна функция = одна ответственность
- Понятные имена функций и переменных
- Максимум 50 строк на функцию
- Минимум параметров (предпочтительно 1-3)

### Обработка ошибок
- **Без retry механизмов** - простые сообщения об ошибках
- Понятные сообщения пользователю на русском
- Логирование всех ошибок (детали в @vision.md секция 7)

### Данные
- **Только dict и list** для структур данных
- Никаких классов для моделей данных
- История в памяти: `{chat_id: [messages]}`
- Лимиты: max 20 сообщений на чат

## Технологические стандарты

### Обязательные технологии
Указаны в @vision.md секция 1:
- Python 3.11+
- aiogram для Telegram Bot
- OpenRouter через OpenAI client
- pytest для тестирования
- uv + pyproject.toml для зависимостей

### Логирование
Детали в @vision.md секция 7:
- **Двойной вывод**: файл + консоль одновременно
- Структурированный формат: `timestamp | level | message`
- Логировать: запуск/остановку, LLM запросы/ответы/ошибки
- Использовать стандартный Python logging

### Конфигурация
Согласно @vision.md секция 5:
- Секреты в `.env` (НЕ в git)
- Настройки приложения в `config.py`
- Зависимости в `pyproject.toml`
- Системный промпт в `src/system_prompt.md`

## Процесс разработки

### Цикл разработки
Описан в @vision.md секция 2:
1. Реализация одной функции
2. Локальное тестирование
3. Commit + Push
4. Деплой при готовности

### Тестирование
- **Модульные тесты** только для критичной логики
- **Ручное тестирование** через Telegram для UX
- Никаких сложных integration тестов на MVP

### Деплой
Детали в @vision.md секция 9:
- Docker + docker-compose
- Makefile для автоматизации команд
- Git для обновлений на VPS
- Простой процесс без CI/CD

## Что НЕ делать

### Запрещенные подходы
- ❌ Классы и ООП (кроме исключительных случаев)
- ❌ Сложные паттерны проектирования
- ❌ Базы данных (используем память)
- ❌ Retry механизмы для ошибок
- ❌ Сложные системы конфигурации
- ❌ Внешние системы логирования/мониторинга

### Избегаем переусложнения
- ❌ Преждевременная оптимизация
- ❌ Глубокая вложенность файлов/функций
- ❌ Множественные уровни абстракции
- ❌ Сложные системы кеширования
- ❌ Микросервисная архитектура

## Примеры правильного кода

### Функция обработчика
```python
async def handle_message(message: Message):
    """Обработка обычного сообщения пользователя"""
    chat_id = str(message.chat.id)
    user_text = message.text
    
    # Строим промпт с историей
    messages = build_prompt(chat_id, user_text)
    
    # Отправляем в LLM
    response = await send_to_llm(messages)
    
    # Сохраняем в историю и отправляем ответ
    save_to_history(chat_id, user_text, response)
    await message.answer(response)
```

### Конфигурация
```python
def load_config():
    """Загрузка конфигурации из переменных окружения"""
    load_dotenv()
    
    return {
        "telegram_token": os.getenv("TELEGRAM_BOT_TOKEN"),
        "openrouter_key": os.getenv("OPENROUTER_API_KEY"),
        "model_name": "openai/gpt-4o-mini",
        "max_history": 20
    }
```

---

**Правило**: При любых сомнениях выбираем более простое решение. Сложность добавляем только при острой необходимости.

**Ссылка**: Полная техническая документация в @vision.md